From 9267c6438983167d1b706afa212142cc1490c4e4 Mon Sep 17 00:00:00 2001
From: Yuantian Tang <andy.tang@nxp.com>
Date: Thu, 10 Aug 2023 17:05:55 +0800
Subject: [PATCH 12/24] update pwm driver

---
 drivers/pwm/Kconfig         |  20 ++
 drivers/pwm/Makefile        |   2 +
 drivers/pwm/pwm-adp5585.c   | 227 +++++++++++++++++++
 drivers/pwm/pwm-cros-ec.c   |   1 -
 drivers/pwm/pwm-imx-tpm.c   |   8 +
 drivers/pwm/pwm-imx27.c     |  98 ++++++++-
 drivers/pwm/pwm-rpmsg-imx.c | 428 ++++++++++++++++++++++++++++++++++++
 7 files changed, 773 insertions(+), 11 deletions(-)
 create mode 100644 drivers/pwm/pwm-adp5585.c
 create mode 100644 drivers/pwm/pwm-rpmsg-imx.c

diff --git a/drivers/pwm/Kconfig b/drivers/pwm/Kconfig
index aa29841bb..f7525783d 100644
--- a/drivers/pwm/Kconfig
+++ b/drivers/pwm/Kconfig
@@ -42,6 +42,14 @@ config PWM_DEBUG
 	  It is expected to introduce some runtime overhead and diagnostic
 	  output to the kernel log, so only enable while working on a driver.
 
+config PWM_ADP5585
+	tristate "ADP5585 PWM support"
+	depends on MFD_ADP5585
+	help
+	  This option enables support for on-chip PWM found
+	  on Analog Devices ADP5585.
+
+
 config PWM_AB8500
 	tristate "AB8500 PWM support"
 	depends on AB8500_CORE && ARCH_U8500
@@ -471,6 +479,18 @@ config PWM_ROCKCHIP
 	  Generic PWM framework driver for the PWM controller found on
 	  Rockchip SoCs.
 
+config PWM_RPCHIP
+	tristate "PWM proxy chip over RPMSG"
+	depends on (ARCH_MXC || COMPILE_TEST) && RPMSG
+	help
+	  This driver can support virtual pwm-rpmsg function. So that
+	  Acore can use some TPM resources of Mcore on some SoC platforms.
+	  This driver provide a protocal to send pwm request through RPMSG to
+	  Mcore and control the TPM modules on Mcore.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called pwm-rpmsg-imx.
+
 config PWM_SAMSUNG
 	tristate "Samsung PWM support"
 	depends on PLAT_SAMSUNG || ARCH_S5PV210 || ARCH_EXYNOS || COMPILE_TEST
diff --git a/drivers/pwm/Makefile b/drivers/pwm/Makefile
index 708840b7f..3a4f28c6d 100644
--- a/drivers/pwm/Makefile
+++ b/drivers/pwm/Makefile
@@ -2,6 +2,7 @@
 obj-$(CONFIG_PWM)		+= core.o
 obj-$(CONFIG_PWM_SYSFS)		+= sysfs.o
 obj-$(CONFIG_PWM_AB8500)	+= pwm-ab8500.o
+obj-$(CONFIG_PWM_ADP5585)	+= pwm-adp5585.o
 obj-$(CONFIG_PWM_ATMEL)		+= pwm-atmel.o
 obj-$(CONFIG_PWM_ATMEL_HLCDC_PWM)	+= pwm-atmel-hlcdc.o
 obj-$(CONFIG_PWM_ATMEL_TCB)	+= pwm-atmel-tcb.o
@@ -43,6 +44,7 @@ obj-$(CONFIG_PWM_RASPBERRYPI_POE)	+= pwm-raspberrypi-poe.o
 obj-$(CONFIG_PWM_RCAR)		+= pwm-rcar.o
 obj-$(CONFIG_PWM_RENESAS_TPU)	+= pwm-renesas-tpu.o
 obj-$(CONFIG_PWM_ROCKCHIP)	+= pwm-rockchip.o
+obj-$(CONFIG_PWM_RPCHIP)	+= pwm-rpmsg-imx.o
 obj-$(CONFIG_PWM_SAMSUNG)	+= pwm-samsung.o
 obj-$(CONFIG_PWM_SIFIVE)	+= pwm-sifive.o
 obj-$(CONFIG_PWM_SL28CPLD)	+= pwm-sl28cpld.o
diff --git a/drivers/pwm/pwm-adp5585.c b/drivers/pwm/pwm-adp5585.c
new file mode 100644
index 000000000..3396f363d
--- /dev/null
+++ b/drivers/pwm/pwm-adp5585.c
@@ -0,0 +1,227 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * PWM driver for Analog Devices ADP5585 MFD
+ *
+ * Copyright 2022 NXP
+ */
+
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/mfd/adp5585.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/pwm.h>
+#include <linux/slab.h>
+#include <linux/time.h>
+
+#define ADP5585_PWM_CHAN_NUM		1
+#define ADP5585_PWM_FASTEST_PERIOD_NS	2000
+#define ADP5585_PWM_SLOWEST_PERIOD_NS	131070000
+
+struct adp5585_pwm_chip {
+	struct device *parent;
+	struct pwm_chip chip;
+	struct mutex lock;
+	u8 pin_config_val;
+};
+
+static inline struct adp5585_pwm_chip *
+to_adp5585_pwm_chip(struct pwm_chip *chip)
+{
+	return container_of(chip, struct adp5585_pwm_chip, chip);
+}
+
+static int adp5585_pwm_reg_read(struct adp5585_pwm_chip *adp5585_pwm, u8 reg, u8 *val)
+{
+	struct adp5585_dev *adp5585;
+	adp5585 = dev_get_drvdata(adp5585_pwm->parent);
+
+	return adp5585->read_reg(adp5585, reg, val);
+}
+
+static int adp5585_pwm_reg_write(struct adp5585_pwm_chip *adp5585_pwm, u8 reg, u8 val)
+{
+	struct adp5585_dev *adp5585;
+	adp5585 = dev_get_drvdata(adp5585_pwm->parent);
+
+	return adp5585->write_reg(adp5585, reg, val);
+}
+
+static void pwm_adp5585_get_state(struct pwm_chip *chip,
+				  struct pwm_device *pwm,
+				  struct pwm_state *state)
+{
+	struct adp5585_pwm_chip *adp5585_pwm = to_adp5585_pwm_chip(chip);
+	u32 on, off;
+	u8 temp;
+
+	/* get period */
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_OFFT_LOW, &temp);
+	off = temp;
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_OFFT_HIGH, &temp);
+	off |= temp << 8;
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_ONT_LOW, &temp);
+	on = temp;
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_ONT_HIGH, &temp);
+	on |= temp << 8;
+	state->period = (on + off) * NSEC_PER_USEC;
+
+	/* get duty cycle */
+	state->duty_cycle = on;
+
+	/* get polarity */
+	state->polarity = PWM_POLARITY_NORMAL;
+
+	/* get channel status */
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_CFG, &temp);
+	state->enabled = temp & ADP5585_PWM_CFG_EN;
+}
+
+static int pwm_adp5585_apply(struct pwm_chip *chip,
+			     struct pwm_device *pwm,
+			     const struct pwm_state *state)
+{
+	struct adp5585_pwm_chip *adp5585_pwm = to_adp5585_pwm_chip(chip);
+	u8 enabled;
+	int ret;
+	u32 on, off;
+
+	if (state->period > ADP5585_PWM_SLOWEST_PERIOD_NS ||
+	    state->period < ADP5585_PWM_FASTEST_PERIOD_NS)
+		return -EINVAL;
+
+	mutex_lock(&adp5585_pwm->lock);
+	/* set on/off cycle*/
+	on = DIV_ROUND_CLOSEST_ULL(state->duty_cycle, NSEC_PER_USEC);
+	off = DIV_ROUND_CLOSEST_ULL((state->period - state->duty_cycle),
+				   NSEC_PER_USEC);
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_OFFT_LOW,
+				    off & ADP5585_REG_MASK);
+	if (ret)
+		goto ERROR_PATH;
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_OFFT_HIGH,
+				    (off >> 8) & ADP5585_REG_MASK);
+	if (ret)
+		goto ERROR_PATH;
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_ONT_LOW,
+				    on & ADP5585_REG_MASK);
+	if (ret)
+		goto ERROR_PATH;
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_ONT_HIGH,
+				    (on >> 8) & ADP5585_REG_MASK);
+	if (ret)
+		goto ERROR_PATH;
+
+	/* enable PWM and set to continuous PWM mode*/
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PWM_CFG, &enabled);
+	if (state->enabled)
+		ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_CFG,
+					ADP5585_PWM_CFG_EN);
+	else
+		ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PWM_CFG, 0);
+
+ERROR_PATH:
+	mutex_unlock(&adp5585_pwm->lock);
+
+	return ret;
+}
+
+static int pwm_adp5585_request(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct adp5585_pwm_chip *adp5585_pwm = to_adp5585_pwm_chip(chip);
+	u8 reg_cfg;
+	int ret;
+
+	mutex_lock(&adp5585_pwm->lock);
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PIN_CONFIG_C,
+			     &adp5585_pwm->pin_config_val);
+	reg_cfg = adp5585_pwm->pin_config_val & ~ADP5585_PIN_CONFIG_R3_MASK;
+	reg_cfg |= ADP5585_PIN_CONFIG_R3_PWM;
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PIN_CONFIG_C,
+				    reg_cfg);
+
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_GENERAL_CFG,
+			     &adp5585_pwm->pin_config_val);
+	reg_cfg |= ADP5585_GENERAL_CFG_OSC_EN;
+	ret = adp5585_pwm_reg_write(adp5585_pwm, ADP5585_GENERAL_CFG, reg_cfg);
+	mutex_unlock(&adp5585_pwm->lock);
+
+	return ret;
+}
+
+static void pwm_adp5585_free(struct pwm_chip *chip, struct pwm_device *pwm)
+{
+	struct adp5585_pwm_chip *adp5585_pwm = to_adp5585_pwm_chip(chip);
+	u8 reg_cfg;
+
+	mutex_lock(&adp5585_pwm->lock);
+	adp5585_pwm_reg_read(adp5585_pwm, ADP5585_PIN_CONFIG_C, &reg_cfg);
+	reg_cfg &= ~ADP5585_PIN_CONFIG_R3_MASK;
+	reg_cfg |= adp5585_pwm->pin_config_val & ADP5585_PIN_CONFIG_R3_MASK;
+	adp5585_pwm_reg_write(adp5585_pwm, ADP5585_PIN_CONFIG_C, reg_cfg);
+	mutex_unlock(&adp5585_pwm->lock);
+}
+
+static const struct pwm_ops adp5585_pwm_ops = {
+	.request = pwm_adp5585_request,
+	.free = pwm_adp5585_free,
+	.get_state = pwm_adp5585_get_state,
+	.apply = pwm_adp5585_apply,
+	.owner = THIS_MODULE,
+};
+
+static int adp5585_pwm_probe(struct platform_device *pdev)
+{
+	struct adp5585_pwm_chip *adp5585_pwm;
+	int ret;
+
+	adp5585_pwm = devm_kzalloc(&pdev->dev, sizeof(*adp5585_pwm), GFP_KERNEL);
+	if (!adp5585_pwm)
+		return -ENOMEM;
+
+	adp5585_pwm->parent = pdev->dev.parent;
+	platform_set_drvdata(pdev, adp5585_pwm);
+
+	adp5585_pwm->chip.dev = &pdev->dev;
+	adp5585_pwm->chip.ops = &adp5585_pwm_ops;
+	adp5585_pwm->chip.npwm = ADP5585_PWM_CHAN_NUM;
+
+	mutex_init(&adp5585_pwm->lock);
+
+	ret = pwmchip_add(&adp5585_pwm->chip);
+	if (ret)
+		dev_err(&pdev->dev, "failed to add PWM chip: %d\n", ret);
+
+	return ret;
+}
+
+static int adp5585_pwm_remove(struct platform_device *pdev)
+{
+	struct adp5585_pwm_chip *adp5585_pwm = platform_get_drvdata(pdev);
+
+	pwmchip_remove(&adp5585_pwm->chip);
+
+	return 0;
+}
+
+static const struct of_device_id adp5585_pwm_of_match[] = {
+	{.compatible = "adp5585-pwm", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, adp5585_of_match);
+
+static struct platform_driver adp5585_pwm_driver = {
+	.driver	= {
+		.name	= "adp5585-pwm",
+		.of_match_table = adp5585_pwm_of_match,
+	},
+	.probe		= adp5585_pwm_probe,
+	.remove		= adp5585_pwm_remove,
+};
+module_platform_driver(adp5585_pwm_driver);
+
+MODULE_AUTHOR("Xiaoning Wang <xiaoning.wang@nxp.com>");
+MODULE_DESCRIPTION("ADP5585 PWM Driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/pwm/pwm-cros-ec.c b/drivers/pwm/pwm-cros-ec.c
index adfd03c11..5e29d9c68 100644
--- a/drivers/pwm/pwm-cros-ec.c
+++ b/drivers/pwm/pwm-cros-ec.c
@@ -157,7 +157,6 @@ static void cros_ec_pwm_get_state(struct pwm_chip *chip, struct pwm_device *pwm,
 
 	state->enabled = (ret > 0);
 	state->period = EC_PWM_MAX_DUTY;
-	state->polarity = PWM_POLARITY_NORMAL;
 
 	/*
 	 * Note that "disabled" and "duty cycle == 0" are treated the same. If
diff --git a/drivers/pwm/pwm-imx-tpm.c b/drivers/pwm/pwm-imx-tpm.c
index e5e7b7c33..e60480a78 100644
--- a/drivers/pwm/pwm-imx-tpm.c
+++ b/drivers/pwm/pwm-imx-tpm.c
@@ -397,6 +397,14 @@ static int __maybe_unused pwm_imx_tpm_suspend(struct device *dev)
 	if (tpm->enable_count > 0)
 		return -EBUSY;
 
+	/* force 'real_period' to be zero to force
+	 * period update code can be executed after
+	 * system resume back, since suspend causes
+	 * the period related registers to become
+	 * their reset values.
+	 */
+	tpm->real_period = 0;
+
 	clk_disable_unprepare(tpm->clk);
 
 	return 0;
diff --git a/drivers/pwm/pwm-imx27.c b/drivers/pwm/pwm-imx27.c
index ea91a2f81..07445bdb4 100644
--- a/drivers/pwm/pwm-imx27.c
+++ b/drivers/pwm/pwm-imx27.c
@@ -21,11 +21,13 @@
 #include <linux/platform_device.h>
 #include <linux/pwm.h>
 #include <linux/slab.h>
+#include <linux/spinlock.h>
 
 #define MX3_PWMCR			0x00    /* PWM Control Register */
 #define MX3_PWMSR			0x04    /* PWM Status Register */
 #define MX3_PWMSAR			0x0C    /* PWM Sample Register */
 #define MX3_PWMPR			0x10    /* PWM Period Register */
+#define MX3_PWMCNR			0x14    /* PWM Counter Register */
 
 #define MX3_PWMCR_FWM			GENMASK(27, 26)
 #define MX3_PWMCR_STOPEN		BIT(25)
@@ -82,6 +84,7 @@
 struct pwm_imx27_chip {
 	struct clk	*clk_ipg;
 	struct clk	*clk_per;
+	struct clk	*clk_32k;
 	void __iomem	*mmio_base;
 	struct pwm_chip	chip;
 
@@ -91,6 +94,7 @@ struct pwm_imx27_chip {
 	 * value to return in that case.
 	 */
 	unsigned int duty_cycle;
+	spinlock_t lock;
 };
 
 #define to_pwm_imx27_chip(chip)	container_of(chip, struct pwm_imx27_chip, chip)
@@ -99,23 +103,36 @@ static int pwm_imx27_clk_prepare_enable(struct pwm_imx27_chip *imx)
 {
 	int ret;
 
+	if (imx->clk_32k) {
+		ret = clk_prepare_enable(imx->clk_32k);
+		if (ret)
+			goto err1;
+	}
+
 	ret = clk_prepare_enable(imx->clk_ipg);
 	if (ret)
-		return ret;
+		goto err2;
 
 	ret = clk_prepare_enable(imx->clk_per);
-	if (ret) {
-		clk_disable_unprepare(imx->clk_ipg);
-		return ret;
-	}
+	if (ret)
+		goto err3;
 
 	return 0;
+err3:
+	clk_disable_unprepare(imx->clk_ipg);
+err2:
+	if (imx->clk_32k)
+		clk_disable_unprepare(imx->clk_32k);
+err1:
+	return ret;
 }
 
 static void pwm_imx27_clk_disable_unprepare(struct pwm_imx27_chip *imx)
 {
 	clk_disable_unprepare(imx->clk_per);
 	clk_disable_unprepare(imx->clk_ipg);
+	if (imx->clk_32k)
+		clk_disable_unprepare(imx->clk_32k);
 }
 
 static void pwm_imx27_get_state(struct pwm_chip *chip,
@@ -201,10 +218,10 @@ static void pwm_imx27_wait_fifo_slot(struct pwm_chip *chip,
 
 	sr = readl(imx->mmio_base + MX3_PWMSR);
 	fifoav = FIELD_GET(MX3_PWMSR_FIFOAV, sr);
-	if (fifoav == MX3_PWMSR_FIFOAV_4WORDS) {
+	if (fifoav >= MX3_PWMSR_FIFOAV_3WORDS) {
 		period_ms = DIV_ROUND_UP_ULL(pwm_get_period(pwm),
 					 NSEC_PER_MSEC);
-		msleep(period_ms);
+		msleep(period_ms * (fifoav - 2));
 
 		sr = readl(imx->mmio_base + MX3_PWMSR);
 		if (fifoav == FIELD_GET(MX3_PWMSR_FIFOAV, sr))
@@ -215,13 +232,15 @@ static void pwm_imx27_wait_fifo_slot(struct pwm_chip *chip,
 static int pwm_imx27_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 			   const struct pwm_state *state)
 {
-	unsigned long period_cycles, duty_cycles, prescale;
+	unsigned long period_cycles, duty_cycles, prescale, counter_check, flags;
 	struct pwm_imx27_chip *imx = to_pwm_imx27_chip(chip);
+	void __iomem *reg_sar = imx->mmio_base + MX3_PWMSAR;
+	__force u32 sar_last, sar_current;
 	struct pwm_state cstate;
 	unsigned long long c;
 	unsigned long long clkrate;
 	int ret;
-	u32 cr;
+	u32 cr, timeout = 1000;
 
 	pwm_get_state(pwm, &cstate);
 
@@ -262,7 +281,57 @@ static int pwm_imx27_apply(struct pwm_chip *chip, struct pwm_device *pwm,
 		pwm_imx27_sw_reset(chip);
 	}
 
-	writel(duty_cycles, imx->mmio_base + MX3_PWMSAR);
+	/*
+	 * This is a limited workaround. When the SAR FIFO is empty, the new
+	 * write value will be directly applied to SAR even the current period
+	 * is not over.
+	 * If the new SAR value is less than the old one, and the counter is
+	 * greater than the new SAR value, the current period will not filp
+	 * the level. This will result in a pulse with a duty cycle of 100%.
+	 * So, writing the current value of the SAR to SAR here before updating
+	 * the new SAR value can avoid this issue.
+	 *
+	 * Add a spin lock and turn off the interrupt to ensure that the
+	 * real-time performance can be guaranteed as much as possible when
+	 * operating the following operations.
+	 *
+	 * 1. Add a threshold of 1.5us. If the time T between the read current
+	 * count value CNR and the end of the cycle is less than 1.5us, wait
+	 * for T to be longer than 1.5us before updating the SAR register.
+	 * This is to avoid the situation that when the first SAR is written,
+	 * the current cycle just ends and the SAR FIFO that just be written
+	 * is emptied again.
+	 *
+	 * 2. Use __raw_writel() to minimize the interval between two writes to
+	 * the SAR register to increase the fastest pwm frequency supported.
+	 *
+	 * When the PWM period is longer than 2us(or <500KHz), this workaround
+	 * can solve this problem.
+	 */
+	if (duty_cycles < imx->duty_cycle) {
+		c = clkrate * 1500;
+		do_div(c, NSEC_PER_SEC);
+		counter_check = c;
+		sar_last = cpu_to_le32(imx->duty_cycle);
+		sar_current = cpu_to_le32(duty_cycles);
+
+		spin_lock_irqsave(&imx->lock, flags);
+		if (state->period >= 2000) {
+			while ((period_cycles -
+				readl_relaxed(imx->mmio_base + MX3_PWMCNR))
+				< counter_check) {
+				if (!--timeout)
+					break;
+			};
+		}
+		if (!(MX3_PWMSR_FIFOAV &
+		      readl_relaxed(imx->mmio_base + MX3_PWMSR)))
+			__raw_writel(sar_last, reg_sar);
+		__raw_writel(sar_current, reg_sar);
+		spin_unlock_irqrestore(&imx->lock, flags);
+	} else
+		writel(duty_cycles, imx->mmio_base + MX3_PWMSAR);
+
 	writel(period_cycles, imx->mmio_base + MX3_PWMPR);
 
 	/*
@@ -323,6 +392,15 @@ static int pwm_imx27_probe(struct platform_device *pdev)
 		return dev_err_probe(&pdev->dev, PTR_ERR(imx->clk_per),
 				     "failed to get peripheral clock\n");
 
+	imx->clk_32k = devm_clk_get_optional(&pdev->dev, "32k");
+	if (IS_ERR(imx->clk_32k)) {
+		dev_err(&pdev->dev, "getting 32k clock failed with %ld\n",
+				PTR_ERR(imx->clk_32k));
+		return PTR_ERR(imx->clk_32k);
+	}
+
+	spin_lock_init(&imx->lock);
+	imx->duty_cycle = 0;
 	imx->chip.ops = &pwm_imx27_ops;
 	imx->chip.dev = &pdev->dev;
 	imx->chip.npwm = 1;
diff --git a/drivers/pwm/pwm-rpmsg-imx.c b/drivers/pwm/pwm-rpmsg-imx.c
new file mode 100644
index 000000000..c1b7c1123
--- /dev/null
+++ b/drivers/pwm/pwm-rpmsg-imx.c
@@ -0,0 +1,428 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright 2021 NXP.
+ */
+
+/*
+ * The pwm-rpmsg transfer protocol:
+ *   +---------------+-------------------------------+
+ *   |  Byte Offset  |            Content            |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       0       |           Category            |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |     1 ~ 2     |           Version             |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       3       |             Type              |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       4       |           Command             |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       5       |           Reserved0           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       6       |           Reserved1           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       7       |           Reserved2           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       8       |           Reserved3           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       9       |           Reserved4           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       10      |          Request ID           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       11      |         Return Value          |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       12      |            PWM ID             |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       13      |          Channel ID           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |    14 ~ 21    |            Period             |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |    22 ~ 29    |          Duty Cycle           |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       30      |           Polarity            |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *   |       31      |            Enable             |
+ *   +---------------+---+---+---+---+---+---+---+---+
+ *
+ * The definition of Return Value:
+ * 0x00 = Success
+ * 0x01 = Failed
+ * 0x02 = Invalid parameter
+ * 0x03 = Chip Busy
+ * 0x04 = Operate in invalid state
+ * 0x05 = Memory allocation failed
+ * 0x06 = Timeout when waiting for an event
+ * 0x07 = Cannot add to list as node already in another list
+ * 0x08 = Cannot remove from list as node not in list
+ * 0x09 = Transfer timeout
+ * 0x0A = Transfer failed due to peer core not ready
+ * 0x0B = Transfer failed due to communication failure
+ * 0x0C = Cannot find service for a request/notification
+ * 0x0D = Service version cannot support the request/notification
+ */
+
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/imx_rpmsg.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pwm.h>
+#include <linux/platform_device.h>
+#include <linux/time.h>
+#include <linux/delay.h>
+#include <linux/rpmsg.h>
+
+#define PWM_RPMSG_TIMEOUT_MS			500
+
+#define PWM_RPMSG_CATEGORY			0x0a
+#define PWM_RPMSG_VERSION			0x0001
+#define PWM_RPMSG_TYPE_REQUEST			0x00
+#define PWM_RPMSG_TYPE_RESPONSE			0x01
+#define PWM_RPMSG_COMMAND_GET			0x00
+#define PWM_RPMSG_COMMAND_SET			0x01
+
+struct pwm_rpmsg_msg {
+	struct imx_rpmsg_head header;
+
+	/* Payload Start*/
+	u8 request_id;
+	u8 ret_val;
+	u8 chip_id;
+	u8 channel_id;
+	u64 period;
+	u64 duty_cycle;
+	u8 polarity;
+	u8 enabled;
+} __packed __aligned(1);
+
+struct pwm_rpmsg_info {
+	struct rpmsg_device *rpdev;
+	struct device *dev;
+	struct pwm_rpmsg_msg *msg;
+	struct completion cmd_complete;
+	struct mutex lock;
+
+	u8 chip_id;
+	u8 channel_id;
+	u8 request_id;
+};
+
+static struct pwm_rpmsg_info pwm_rpmsg;
+
+struct imx_rpmsg_pwm_data {
+	struct pwm_chip chip;
+	u8 chip_id;
+};
+
+static inline struct imx_rpmsg_pwm_data *
+to_imx_rpmsg_pwm_chip(struct pwm_chip *chip)
+{
+	return container_of(chip, struct imx_rpmsg_pwm_data, chip);
+}
+
+static int pwm_rpmsg_cb(struct rpmsg_device *rpdev, void *data, int len,
+			   void *priv, u32 src)
+{
+	struct pwm_rpmsg_msg *msg = (struct pwm_rpmsg_msg *)data;
+
+	if (msg->header.type != PWM_RPMSG_TYPE_RESPONSE)
+		return -EINVAL;
+
+	if (msg->request_id != pwm_rpmsg.request_id) {
+		dev_err(&rpdev->dev,
+		"expected request_id:%d, received request_id:%d, drop this recv\n",
+		pwm_rpmsg.request_id, msg->request_id);
+
+		/*
+		 * This response does not match the request id.
+		 * Drop it and wait for the right response.
+		 */
+		return 0;
+	}
+
+	if (msg->chip_id != pwm_rpmsg.chip_id ||
+	    msg->channel_id != pwm_rpmsg.channel_id) {
+		dev_err(&rpdev->dev,
+		"expected chip_id:%d, channel_id:%2x, received chip_id:%d, channel_id:%2x\n",
+		pwm_rpmsg.chip_id, pwm_rpmsg.channel_id,
+		msg->chip_id, msg->channel_id);
+
+		/*
+		 * The chip_id or channel_id of this response does not match the
+		 * request, but the request_id match. So return error.
+		 */
+		return -EINVAL;
+	}
+
+	/* Receive Success */
+	pwm_rpmsg.msg = msg;
+
+	complete(&pwm_rpmsg.cmd_complete);
+
+	return 0;
+}
+
+static int rpmsg_xfer(struct pwm_rpmsg_msg *rmsg, struct pwm_rpmsg_info *info)
+{
+	int ret = 0;
+
+	ret = rpmsg_send(info->rpdev->ept, (void *)rmsg,
+						sizeof(struct pwm_rpmsg_msg));
+	if (ret < 0) {
+		dev_err(&info->rpdev->dev, "rpmsg_send failed: %d\n", ret);
+		return ret;
+	}
+
+	ret = wait_for_completion_timeout(&info->cmd_complete,
+					msecs_to_jiffies(PWM_RPMSG_TIMEOUT_MS));
+	if (!ret) {
+		dev_err(&info->rpdev->dev,
+		"%s failed: timeout, target chip_id=%-2d, channel_id=0x%02X, %s state\n",
+				__func__, rmsg->chip_id, rmsg->channel_id,
+				(rmsg->header.cmd == 1) ? "SET" : "GET");
+		return -ETIMEDOUT;
+	}
+
+	if (info->msg->ret_val) {
+		dev_dbg(&info->rpdev->dev,
+			"%s failed: %d\n", __func__, info->msg->ret_val);
+		return -(info->msg->ret_val);
+	}
+
+	return 0;
+}
+
+static int pwm_rpsmg_get(struct pwm_rpmsg_info *info, struct pwm_state *state)
+{
+	int ret;
+	struct pwm_rpmsg_msg rmsg;
+
+	if (!info || !info->rpdev)
+		return -EINVAL;
+
+	memset(&rmsg, 0, sizeof(struct pwm_rpmsg_msg));
+	rmsg.header.cate = PWM_RPMSG_CATEGORY;
+	rmsg.header.major = PWM_RPMSG_VERSION;
+	rmsg.header.minor = PWM_RPMSG_VERSION >> 8;
+	rmsg.header.type = PWM_RPMSG_TYPE_REQUEST;
+	rmsg.header.cmd = PWM_RPMSG_COMMAND_GET;
+	rmsg.request_id = info->request_id;
+	rmsg.chip_id = info->chip_id;
+	rmsg.channel_id = info->channel_id;
+	rmsg.period = state->period;
+	rmsg.duty_cycle = state->duty_cycle;
+	rmsg.polarity = state->polarity;
+	rmsg.enabled = state->enabled;
+
+	reinit_completion(&info->cmd_complete);
+
+	ret = rpmsg_xfer(&rmsg, info);
+	if (ret)
+		return ret;
+
+	state->period = info->msg->period;
+	state->duty_cycle = info->msg->duty_cycle;
+	state->polarity = info->msg->polarity;
+	state->enabled = info->msg->enabled;
+
+	return ret;
+}
+
+static int pwm_rpsmg_set(struct pwm_rpmsg_info *info, const struct pwm_state *state)
+{
+	int ret;
+	struct pwm_rpmsg_msg rmsg;
+
+	if (!info || !info->rpdev)
+		return -EINVAL;
+
+	memset(&rmsg, 0, sizeof(struct pwm_rpmsg_msg));
+	rmsg.header.cate = PWM_RPMSG_CATEGORY;
+	rmsg.header.major = PWM_RPMSG_VERSION;
+	rmsg.header.minor = PWM_RPMSG_VERSION >> 8;
+	rmsg.header.type = PWM_RPMSG_TYPE_REQUEST;
+	rmsg.header.cmd = PWM_RPMSG_COMMAND_SET;
+	rmsg.request_id = info->request_id;
+	rmsg.chip_id = info->chip_id;
+	rmsg.channel_id = info->channel_id;
+	rmsg.period = state->period;
+	rmsg.duty_cycle = state->duty_cycle;
+	rmsg.polarity = state->polarity;
+	rmsg.enabled = state->enabled;
+
+	reinit_completion(&info->cmd_complete);
+
+	ret = rpmsg_xfer(&rmsg, info);
+
+	return ret;
+}
+
+static int pwm_rpmsg_probe(struct rpmsg_device *rpdev)
+{
+	int ret = 0;
+
+	if (!rpdev) {
+		dev_info(&rpdev->dev, "%s failed, rpdev=NULL\n", __func__);
+		return -EINVAL;
+	}
+
+	pwm_rpmsg.rpdev = rpdev;
+
+	mutex_init(&pwm_rpmsg.lock);
+	init_completion(&pwm_rpmsg.cmd_complete);
+
+	dev_info(&rpdev->dev, "new channel: 0x%x -> 0x%x!\n",
+						rpdev->src, rpdev->dst);
+
+	return ret;
+}
+
+static void pwm_rpmsg_remove(struct rpmsg_device *rpdev)
+{
+	pwm_rpmsg.rpdev = NULL;
+	dev_info(&rpdev->dev, "pwm rpmsg driver is removed\n");
+}
+
+static struct rpmsg_device_id pwm_rpmsg_id_table[] = {
+	{ .name	= "rpmsg-pwm-channel" },
+	{ },
+};
+
+static struct rpmsg_driver pwm_rpmsg_driver = {
+	.drv.name	= "pwm-rpmsg",
+	.drv.owner	= THIS_MODULE,
+	.id_table	= pwm_rpmsg_id_table,
+	.probe		= pwm_rpmsg_probe,
+	.remove		= pwm_rpmsg_remove,
+	.callback	= pwm_rpmsg_cb,
+};
+
+static void pwm_rpchip_get_state(struct pwm_chip *chip,
+				  struct pwm_device *pwm,
+				  struct pwm_state *state)
+{
+	struct imx_rpmsg_pwm_data *rdata = to_imx_rpmsg_pwm_chip(chip);
+	int ret;
+
+	mutex_lock(&pwm_rpmsg.lock);
+
+	if (pwm_rpmsg.request_id >= 0xFF)
+		pwm_rpmsg.request_id = 0;
+	pwm_rpmsg.request_id++;
+
+	pwm_rpmsg.chip_id = rdata->chip_id;
+	pwm_rpmsg.channel_id = pwm->hwpwm;
+	ret = pwm_rpsmg_get(&pwm_rpmsg, state);
+
+	mutex_unlock(&pwm_rpmsg.lock);
+}
+
+static int pwm_rpchip_apply(struct pwm_chip *chip,
+			     struct pwm_device *pwm,
+			     const struct pwm_state *state)
+{
+	struct imx_rpmsg_pwm_data *rdata = to_imx_rpmsg_pwm_chip(chip);
+	int ret;
+
+	mutex_lock(&pwm_rpmsg.lock);
+
+	if (pwm_rpmsg.request_id >= 0xFF)
+		pwm_rpmsg.request_id = 0;
+	pwm_rpmsg.request_id++;
+
+	pwm_rpmsg.chip_id = rdata->chip_id;
+	pwm_rpmsg.channel_id = pwm->hwpwm;
+	ret = pwm_rpsmg_set(&pwm_rpmsg, state);
+
+	mutex_unlock(&pwm_rpmsg.lock);
+
+	return ret;
+}
+
+static const struct pwm_ops imx_tpm_pwm_ops = {
+	.get_state = pwm_rpchip_get_state,
+	.apply = pwm_rpchip_apply,
+	.owner = THIS_MODULE,
+};
+
+static int pwm_rpchip_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct device_node *np = dev->of_node;
+	struct imx_rpmsg_pwm_data *rdata;
+	struct pwm_chip *chip;
+	int ret;
+
+	if (!pwm_rpmsg.rpdev)
+		return -EPROBE_DEFER;
+
+	rdata = devm_kzalloc(&pdev->dev, sizeof(*rdata), GFP_KERNEL);
+	if (!rdata)
+		return -ENOMEM;
+
+	chip = &rdata->chip;
+	/* setup pwm chip description */
+	chip->dev = &pdev->dev;
+	chip->ops = &imx_tpm_pwm_ops;
+	chip->base = -1;
+	chip->of_xlate = of_pwm_xlate_with_flags;
+	chip->of_pwm_n_cells = 3;
+	ret = of_property_read_u32(np, "fsl,pwm-channel-number", &chip->npwm);
+	if (ret < 0) {
+		dev_err(dev, "failed to read pwm channel number from dts: %d\n",
+			     ret);
+		return -EINVAL;
+	}
+	rdata->chip_id = of_alias_get_id(np, "pwm");
+	if (rdata->chip_id < 0) {
+		dev_err(dev, "failed to get pwm alias number: %d\n",
+			     rdata->chip_id);
+		return -EINVAL;
+	}
+
+	platform_set_drvdata(pdev, rdata);
+
+	ret = devm_pwmchip_add(&pdev->dev, &rdata->chip);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to add PWM chip: %d\n", ret);
+		return ret;
+	}
+
+	dev_info(dev, "add PWM chip %d successfully\n", rdata->chip_id);
+
+	return ret;
+}
+
+static const struct of_device_id imx_rpmsg_pwm_dt_ids[] = {
+	{ .compatible = "fsl,pwm-rpchip", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, imx_rpmsg_pwm_dt_ids);
+
+static struct platform_driver imx_rpmsg_pwm_driver = {
+	.driver = {
+		.name	= "imx_rpmsg_pwm",
+		.of_match_table = imx_rpmsg_pwm_dt_ids,
+	},
+	.probe		= pwm_rpchip_probe,
+};
+
+static int __init imx_rpmsg_pwm_driver_init(void)
+{
+	int ret = 0;
+
+	ret = register_rpmsg_driver(&pwm_rpmsg_driver);
+	if (ret < 0)
+		return ret;
+
+	return platform_driver_register(&(imx_rpmsg_pwm_driver));
+}
+device_initcall(imx_rpmsg_pwm_driver_init);
+
+MODULE_AUTHOR("Clark Wang<xiaoning.wang@nxp.com>");
+MODULE_DESCRIPTION("Driver for pwm over rpmsg");
+MODULE_LICENSE("GPL v2");
+MODULE_ALIAS("platform:pwm-rpchip");
-- 
2.25.1

